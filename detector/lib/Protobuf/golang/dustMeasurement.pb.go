// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dustMeasurement.proto

package dustMeasurement

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DustSensorMeasurement struct {
	ParticularMatter2_5Um *float32 `protobuf:"fixed32,1,req,name=particularMatter2_5um,json=particularMatter25um" json:"particularMatter2_5um,omitempty"`
	ParticularMatter10Um  *float32 `protobuf:"fixed32,2,req,name=particularMatter10um" json:"particularMatter10um,omitempty"`
	Temperature           *float32 `protobuf:"fixed32,3,req,name=temperature" json:"temperature,omitempty"`
	Humidity              *float32 `protobuf:"fixed32,4,req,name=humidity" json:"humidity,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DustSensorMeasurement) Reset()         { *m = DustSensorMeasurement{} }
func (m *DustSensorMeasurement) String() string { return proto.CompactTextString(m) }
func (*DustSensorMeasurement) ProtoMessage()    {}
func (*DustSensorMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_dustMeasurement_f0fd6986c4af28d9, []int{0}
}
func (m *DustSensorMeasurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DustSensorMeasurement.Unmarshal(m, b)
}
func (m *DustSensorMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DustSensorMeasurement.Marshal(b, m, deterministic)
}
func (dst *DustSensorMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DustSensorMeasurement.Merge(dst, src)
}
func (m *DustSensorMeasurement) XXX_Size() int {
	return xxx_messageInfo_DustSensorMeasurement.Size(m)
}
func (m *DustSensorMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_DustSensorMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_DustSensorMeasurement proto.InternalMessageInfo

func (m *DustSensorMeasurement) GetParticularMatter2_5Um() float32 {
	if m != nil && m.ParticularMatter2_5Um != nil {
		return *m.ParticularMatter2_5Um
	}
	return 0
}

func (m *DustSensorMeasurement) GetParticularMatter10Um() float32 {
	if m != nil && m.ParticularMatter10Um != nil {
		return *m.ParticularMatter10Um
	}
	return 0
}

func (m *DustSensorMeasurement) GetTemperature() float32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *DustSensorMeasurement) GetHumidity() float32 {
	if m != nil && m.Humidity != nil {
		return *m.Humidity
	}
	return 0
}

func init() {
	proto.RegisterType((*DustSensorMeasurement)(nil), "dustSensorMeasurement")
}

func init() {
	proto.RegisterFile("dustMeasurement.proto", fileDescriptor_dustMeasurement_f0fd6986c4af28d9)
}

var fileDescriptor_dustMeasurement_f0fd6986c4af28d9 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x29, 0x2d, 0x2e,
	0xf1, 0x4d, 0x4d, 0x2c, 0x2e, 0x2d, 0x4a, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x57, 0xda, 0xc7, 0x08, 0x91, 0x09, 0x4e, 0xcd, 0x2b, 0xce, 0x2f, 0x42, 0x92, 0x17, 0x32,
	0xe6, 0x12, 0x2d, 0x48, 0x2c, 0x2a, 0xc9, 0x4c, 0x2e, 0xcd, 0x49, 0x2c, 0xf2, 0x4d, 0x2c, 0x29,
	0x49, 0x2d, 0x32, 0x8a, 0x37, 0x2d, 0xcd, 0x95, 0x60, 0x54, 0x60, 0xd2, 0x60, 0x0a, 0x12, 0xc1,
	0x90, 0x34, 0x2d, 0xcd, 0x15, 0x32, 0xe2, 0xc2, 0x10, 0x37, 0x34, 0x28, 0xcd, 0x95, 0x60, 0xc2,
	0xae, 0x07, 0x24, 0x27, 0xa4, 0xc0, 0xc5, 0x5d, 0x92, 0x9a, 0x5b, 0x90, 0x5a, 0x94, 0x58, 0x52,
	0x5a, 0x94, 0x2a, 0xc1, 0x0c, 0x56, 0x8a, 0x2c, 0x24, 0x24, 0xc5, 0xc5, 0x91, 0x51, 0x9a, 0x9b,
	0x99, 0x92, 0x59, 0x52, 0x29, 0xc1, 0x02, 0x96, 0x86, 0xf3, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xdd, 0x72, 0xd7, 0x06, 0xd8, 0x00, 0x00, 0x00,
}
