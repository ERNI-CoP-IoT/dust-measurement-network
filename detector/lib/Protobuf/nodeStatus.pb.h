/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Wed Aug 22 07:15:08 2018. */

#ifndef PB_NODESTATUS_PB_H_INCLUDED
#define PB_NODESTATUS_PB_H_INCLUDED
#include <pb.h>

#include "dustMeasurement.pb.h"

#include "applicationInformation.pb.h"

#include "batteryState.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _NodeMessage_InformationType {
    NodeMessage_InformationType_UNDEFINED_MESSAGE = 0,
    NodeMessage_InformationType_APPLICATION_INFO = 1,
    NodeMessage_InformationType_BATTERY_STATE = 2,
    NodeMessage_InformationType_DUST_MEASUREMENT = 3
} NodeMessage_InformationType;
#define _NodeMessage_InformationType_MIN NodeMessage_InformationType_UNDEFINED_MESSAGE
#define _NodeMessage_InformationType_MAX NodeMessage_InformationType_DUST_MEASUREMENT
#define _NodeMessage_InformationType_ARRAYSIZE ((NodeMessage_InformationType)(NodeMessage_InformationType_DUST_MEASUREMENT+1))

/* Struct definitions */
typedef struct _NodeMessage {
    NodeMessage_InformationType information;
    pb_size_t which_msg;
    union {
        firmwareVersion appInfoData;
        dustSensorMeasurement dustMeasurementData;
        batteryState batteryStateData;
    } msg;
/* @@protoc_insertion_point(struct:NodeMessage) */
} NodeMessage;

/* Default values for struct fields */
extern const NodeMessage_InformationType NodeMessage_information_default;

/* Initializer values for message structs */
#define NodeMessage_init_default                 {NodeMessage_InformationType_UNDEFINED_MESSAGE, 0, {firmwareVersion_init_default}}
#define NodeMessage_init_zero                    {_NodeMessage_InformationType_MIN, 0, {firmwareVersion_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define NodeMessage_appInfoData_tag              2
#define NodeMessage_dustMeasurementData_tag      3
#define NodeMessage_batteryStateData_tag         4
#define NodeMessage_information_tag              1

/* Struct field encoding specification for nanopb */
extern const pb_field_t NodeMessage_fields[5];

/* Maximum encoded size of messages (where known) */
#define NodeMessage_size                         28

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define NODESTATUS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
