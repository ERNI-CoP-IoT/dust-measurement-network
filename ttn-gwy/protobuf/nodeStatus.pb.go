// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodeStatus.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeMessage_InformationType int32

const (
	NodeMessage_UNDEFINED_MESSAGE NodeMessage_InformationType = 0
	NodeMessage_APPLICATION_INFO  NodeMessage_InformationType = 1
	NodeMessage_BATTERY_STATE     NodeMessage_InformationType = 2
	NodeMessage_DUST_MEASUREMENT  NodeMessage_InformationType = 3
)

var NodeMessage_InformationType_name = map[int32]string{
	0: "UNDEFINED_MESSAGE",
	1: "APPLICATION_INFO",
	2: "BATTERY_STATE",
	3: "DUST_MEASUREMENT",
}
var NodeMessage_InformationType_value = map[string]int32{
	"UNDEFINED_MESSAGE": 0,
	"APPLICATION_INFO":  1,
	"BATTERY_STATE":     2,
	"DUST_MEASUREMENT":  3,
}

func (x NodeMessage_InformationType) Enum() *NodeMessage_InformationType {
	p := new(NodeMessage_InformationType)
	*p = x
	return p
}
func (x NodeMessage_InformationType) String() string {
	return proto.EnumName(NodeMessage_InformationType_name, int32(x))
}
func (x *NodeMessage_InformationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeMessage_InformationType_value, data, "NodeMessage_InformationType")
	if err != nil {
		return err
	}
	*x = NodeMessage_InformationType(value)
	return nil
}
func (NodeMessage_InformationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodeStatus_9ba6888002b8582d, []int{0, 0}
}

type NodeMessage struct {
	Information *NodeMessage_InformationType `protobuf:"varint,1,req,name=information,enum=protobuf.NodeMessage_InformationType,def=0" json:"information,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*NodeMessage_AppInfoData
	//	*NodeMessage_DustMeasurementData
	//	*NodeMessage_BatteryStateData
	Msg                  isNodeMessage_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeMessage) Reset()         { *m = NodeMessage{} }
func (m *NodeMessage) String() string { return proto.CompactTextString(m) }
func (*NodeMessage) ProtoMessage()    {}
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeStatus_9ba6888002b8582d, []int{0}
}
func (m *NodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMessage.Unmarshal(m, b)
}
func (m *NodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMessage.Marshal(b, m, deterministic)
}
func (dst *NodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMessage.Merge(dst, src)
}
func (m *NodeMessage) XXX_Size() int {
	return xxx_messageInfo_NodeMessage.Size(m)
}
func (m *NodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMessage proto.InternalMessageInfo

const Default_NodeMessage_Information NodeMessage_InformationType = NodeMessage_UNDEFINED_MESSAGE

func (m *NodeMessage) GetInformation() NodeMessage_InformationType {
	if m != nil && m.Information != nil {
		return *m.Information
	}
	return Default_NodeMessage_Information
}

type isNodeMessage_Msg interface {
	isNodeMessage_Msg()
}

type NodeMessage_AppInfoData struct {
	AppInfoData *FirmwareVersion `protobuf:"bytes,2,opt,name=appInfoData,oneof"`
}

type NodeMessage_DustMeasurementData struct {
	DustMeasurementData *DustSensorMeasurement `protobuf:"bytes,3,opt,name=dustMeasurementData,oneof"`
}

type NodeMessage_BatteryStateData struct {
	BatteryStateData *BatteryState `protobuf:"bytes,4,opt,name=batteryStateData,oneof"`
}

func (*NodeMessage_AppInfoData) isNodeMessage_Msg() {}

func (*NodeMessage_DustMeasurementData) isNodeMessage_Msg() {}

func (*NodeMessage_BatteryStateData) isNodeMessage_Msg() {}

func (m *NodeMessage) GetMsg() isNodeMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *NodeMessage) GetAppInfoData() *FirmwareVersion {
	if x, ok := m.GetMsg().(*NodeMessage_AppInfoData); ok {
		return x.AppInfoData
	}
	return nil
}

func (m *NodeMessage) GetDustMeasurementData() *DustSensorMeasurement {
	if x, ok := m.GetMsg().(*NodeMessage_DustMeasurementData); ok {
		return x.DustMeasurementData
	}
	return nil
}

func (m *NodeMessage) GetBatteryStateData() *BatteryState {
	if x, ok := m.GetMsg().(*NodeMessage_BatteryStateData); ok {
		return x.BatteryStateData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NodeMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NodeMessage_OneofMarshaler, _NodeMessage_OneofUnmarshaler, _NodeMessage_OneofSizer, []interface{}{
		(*NodeMessage_AppInfoData)(nil),
		(*NodeMessage_DustMeasurementData)(nil),
		(*NodeMessage_BatteryStateData)(nil),
	}
}

func _NodeMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NodeMessage)
	// msg
	switch x := m.Msg.(type) {
	case *NodeMessage_AppInfoData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppInfoData); err != nil {
			return err
		}
	case *NodeMessage_DustMeasurementData:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DustMeasurementData); err != nil {
			return err
		}
	case *NodeMessage_BatteryStateData:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatteryStateData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NodeMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _NodeMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NodeMessage)
	switch tag {
	case 2: // msg.appInfoData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FirmwareVersion)
		err := b.DecodeMessage(msg)
		m.Msg = &NodeMessage_AppInfoData{msg}
		return true, err
	case 3: // msg.dustMeasurementData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DustSensorMeasurement)
		err := b.DecodeMessage(msg)
		m.Msg = &NodeMessage_DustMeasurementData{msg}
		return true, err
	case 4: // msg.batteryStateData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatteryState)
		err := b.DecodeMessage(msg)
		m.Msg = &NodeMessage_BatteryStateData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NodeMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NodeMessage)
	// msg
	switch x := m.Msg.(type) {
	case *NodeMessage_AppInfoData:
		s := proto.Size(x.AppInfoData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NodeMessage_DustMeasurementData:
		s := proto.Size(x.DustMeasurementData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NodeMessage_BatteryStateData:
		s := proto.Size(x.BatteryStateData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NodeMessage)(nil), "protobuf.NodeMessage")
	proto.RegisterEnum("protobuf.NodeMessage_InformationType", NodeMessage_InformationType_name, NodeMessage_InformationType_value)
}

func init() { proto.RegisterFile("nodeStatus.proto", fileDescriptor_nodeStatus_9ba6888002b8582d) }

var fileDescriptor_nodeStatus_9ba6888002b8582d = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0xbb, 0xf5, 0x7d, 0x41, 0x52, 0xd4, 0x2c, 0x3a, 0x99, 0x43, 0x70, 0x0c, 0x84, 0x9d,
	0x7a, 0xd8, 0x51, 0xf0, 0xd0, 0xd9, 0xcc, 0x15, 0x6c, 0x37, 0x9a, 0x4c, 0xd0, 0x4b, 0xc9, 0x5c,
	0x36, 0x0a, 0xb6, 0x29, 0x49, 0x8a, 0xec, 0x73, 0xf9, 0x05, 0xa5, 0x9d, 0xd2, 0xb0, 0x79, 0x4a,
	0x48, 0x7e, 0xff, 0xdf, 0xc3, 0xf3, 0x07, 0x30, 0x17, 0x6b, 0x4e, 0x34, 0xd3, 0xa5, 0x72, 0x0b,
	0x29, 0xb4, 0x40, 0x27, 0xf5, 0xb1, 0x2a, 0x37, 0xfd, 0xee, 0xba, 0x54, 0x3a, 0xe4, 0x4c, 0x95,
	0x92, 0x67, 0x3c, 0xd7, 0x7b, 0xa0, 0x7f, 0xc3, 0x8a, 0xe2, 0x23, 0x7d, 0x67, 0x3a, 0x15, 0x79,
	0x90, 0x6f, 0x84, 0xcc, 0xea, 0xeb, 0xcf, 0x2f, 0x5a, 0x31, 0xad, 0xb9, 0xdc, 0x55, 0x4e, 0xbe,
	0x7f, 0x1b, 0x7e, 0xd9, 0xc0, 0x89, 0xc4, 0x9a, 0x87, 0x5c, 0x29, 0xb6, 0xe5, 0xe8, 0x0d, 0x38,
	0x69, 0x13, 0xec, 0xb5, 0x06, 0xed, 0xd1, 0xd9, 0xf8, 0xce, 0xfd, 0x1d, 0xec, 0x1a, 0xac, 0x6b,
	0x4c, 0xa0, 0xbb, 0x82, 0xdf, 0x77, 0x96, 0x91, 0x8f, 0xa7, 0x41, 0x84, 0xfd, 0x24, 0xc4, 0x84,
	0x78, 0x4f, 0x38, 0x36, 0x65, 0xe8, 0x01, 0x38, 0xac, 0x28, 0xaa, 0x94, 0xcf, 0x34, 0xeb, 0xb5,
	0x07, 0xad, 0x91, 0x33, 0xbe, 0x6e, 0xdc, 0x9b, 0x54, 0x66, 0x9f, 0x4c, 0xf2, 0x17, 0x2e, 0x55,
	0x2a, 0xf2, 0x99, 0x15, 0x9b, 0x3c, 0x22, 0xe0, 0xe2, 0x60, 0xeb, 0x5a, 0x63, 0xd7, 0x9a, 0xdb,
	0x46, 0x53, 0x41, 0x84, 0xe7, 0x4a, 0x48, 0x03, 0x9d, 0x59, 0xf1, 0x5f, 0x69, 0xe4, 0x03, 0x68,
	0xb6, 0x52, 0x1b, 0xff, 0xd5, 0xc6, 0xab, 0xc6, 0x68, 0x12, 0x33, 0x2b, 0x3e, 0x4a, 0x0c, 0xb7,
	0xe0, 0xfc, 0xa0, 0x0c, 0xd4, 0x05, 0xc7, 0x75, 0x40, 0x0b, 0x5d, 0x02, 0xe8, 0x2d, 0x16, 0xcf,
	0xc1, 0xa3, 0x47, 0x83, 0x79, 0x94, 0x04, 0xd1, 0x74, 0x0e, 0x5b, 0xa8, 0x03, 0x4e, 0x27, 0x1e,
	0xa5, 0x38, 0x7e, 0x4d, 0x08, 0xf5, 0x28, 0x86, 0xed, 0x0a, 0xf4, 0x97, 0x84, 0x26, 0x21, 0xf6,
	0xc8, 0x32, 0xc6, 0x21, 0x8e, 0x28, 0xb4, 0x27, 0xff, 0x81, 0x9d, 0xa9, 0xed, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0xf0, 0xd3, 0xfd, 0x1b, 0x02, 0x00, 0x00,
}
